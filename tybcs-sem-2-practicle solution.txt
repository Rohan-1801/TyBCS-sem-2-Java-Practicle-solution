// Slip 1. Q1: Design simple student information like Student_id, Student_Name and Student_Age using Spring Framework.


import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class SchoolRecord extends javax.swing.JFrame {

	Connection con = null;
	Statement stmt = null;
	ResultSet rs = null;

	try {
		Class.forName("com.mysql.jdbc.Driver");
		Connection con = DriverManager.getConnection(
			"jdbc:mysql://localhost:3306/student", "root",
			"root");
		stmt = con.createStatement();
		String rollno = jTextField1.getText();
		String name = jTextField2.getText();
		String clss = jTextField3.getText();
		String sec = jTextField4.getText();
		String adr = jTextArea1.getText();
		String INSERT = "INSERT INTO RECORD VALUES('"
						+ rollno + "','" + name + "','"
						+ clss + "','" + sec + "','" + adr
						+ "');";
		stmt.executeUpdate(INSERT);
		JOptionPane.showMessageDialog(
			this, "Record Added Successfully");
		jButton1.setEnabled(true);
	}
	catch (Exception e) {
		JOptionPane.showMessageDialog(
			this, "Error In Connectivity");
	}



// Slip 1. Q2: Create the hash table that will maintain the mobile number and student name. Display the contact list.



import java.util.*;
import java.io.*;
class HTDemo
{
  public static void main(String args[])
{
   Hashtable student = new Hashtable();
   Enumeration names;

   String str;

   student.put("Amar",new Long(8999999999L));
   student.put("Anil",new Long(9751555327L));
   student.put("Asif",new Long(9751555327L));
   student.put("Aman",new Long(9751555327L));
   student.put("Atul",new Long(9751555327L));
   student.put("Ajay",new Long(9751555327L));

   names = student.keys();
   while(names.hasMoreElements())
{
   str = (String) names.nextElement();
   System.out.println(str + ": " +student.get(str));
    }
  }
}

// Slip 2. Q1: Accept ‘n’ integers from the user. Store and display integers in sorted order having proper collection class. The collection should not accept duplicate elements.



import java.util.*;
import java.io.*;
class SortedNumbers
{
 public static void main(String[] args) throws Exception
 {
   BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
   Set s = new TreeSet();
   System.out.print("Enter no. of integers:");
   int n = Integer.parseInt(br.readLine());
   for(int i = 0; i < n; i++)
  {
   System.out.print("Enter number:");
   int x = Integer.parseInt(br.readLine());
   s.add(x);
   }
   Iterator itr = s.iterator();
   while (itr.hasNext())
   {
    System.out.println(itr.next());
    }
     System.out.print("Enter element to be searched:");
     int no = Integer.parseInt(br.readLine());
     if(s.contains(no))
          System.out.println("Number "+no+" found.");
     else 
          System.out.println("Number "+no+" not found.");
     }
    }

// Slip 2. Q2: Design the Employee login form application using spring form MVC validation.


<%@ page language="java" contentType="text/html; charset=UTF-8"
pageEncoding="UTF-8"%> <%@taglib
uri="http://www.springframework.org/tags/form" prefix="form"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Spring Login Form</title>
</head>
<body>
<form:form name="submitForm" method="POST">
<div align="center">
<table>
<tr>
<td>User Name</td>
<td><input type="text" name="userName" /></td>
</tr>
<tr>
<td>Password</td>
<td><input type="password" name="password" /></td>
</tr>
<tr>
<td></td>
<td><input type="submit" value="Submit" /></td>
</tr>
</table>
<div style="color: red">${error}</div>

</div>
</form:form>
</body>
</html>

// Slip 3. Q1: Write a program to sort HashMap by keys and display the details before sorting and after sorting.



import java.util.Map;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.Iterator;
public class SortHashMapByKeys
{
  public static void main(String args[])
  {
   HashMap<Integer,String>hm=new HashMap<Integer,String>();
   
  hm.put(23,"Yash");
  hm.put(17,"Arun");
  hm.put(15,"Swarit");
  hm.put(9,"Neelesh");
  Iterator<Integer>it = hm.keySet().iterator();
  System.out.println("Before Sorting");
  while(it.hasNext())
  {
    int key=(int)it.next();
    System.out.println("Roll no:"+key+" name: "+hm.get(key));
    }
      System.out.println("\n");
      Map<Integer,String> map=new HashMap<Integer,String>();
      System.out.println("After Sorting");
      TreeMap<Integer,String> tm=new TreeMap<Integer,String>(hm);
      Iterator<Integer> itr=tm.keySet().iterator();
      while(itr.hasNext())
      {
        int key=(int)itr.next();
        System.out.println("Roll no:"+key+" name: "+hm.get(key));
        }
       }
      }  

// Slip 3. Q2: Write a program to solve producer consumer problem in which a producer produces a value and consumer consume the value before producer generate the next value. (Hint: use thread synchronization)




import java.util.LinkedList;

public class Threadexample
 {
	public static void main(String[] args)
		throws InterruptedException
	{
		
		final PC pc = new PC();


		Thread t1 = new Thread(new Runnable() 
		{
			@Override
			public void run()
			{
				try {
					pc.produce();
				}
				catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		});


		Thread t2 = new Thread(new Runnable() {
			@Override
			public void run()
			{
				try {
					pc.consume();
				}
				catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		});


		t1.start();
		t2.start();


		t1.join();
		t2.join();
	}



	public static class PC 
	{



		LinkedList<Integer> list = new LinkedList<>();
		int capacity = 2;


		public void produce() throws InterruptedException
		{
			int value = 0;
			while (true)
			 {
				synchronized (this)
				{
					
					while (list.size() == capacity)
						wait();

					System.out.println("Producer produced-"+ value);


					list.add(value++);

					
					notify();

					
					Thread.sleep(1000);
				}
			}
		}


		public void consume() throws InterruptedException
		{
			while (true) 
			{
				synchronized (this)
				{
					
					while (list.size() == 0)
						wait();


					int val = list.removeFirst();

					System.out.println("Consumer consumed-"+ val);


					notify();


					Thread.sleep(1000);
				}
			}
		}
	

// Slip 4. Q1: Create a java application to store city names and their STD codes using an appropriate collection. The GUI should allow the following operations: i. Add a newcity and its code (No duplicates) ii. Remove a city from the collection iii. Search for a city name and display the code
		
		
		import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

class city extends JFrame implements ActionListener
{

JTextField t1,t2,t3;

JButton b1,b2,b3;
JTextArea t;
JPanel p1,p2;
Hashtable ts;
city()
{
ts=new Hashtable();
t1=new JTextField(10);
t2=new JTextField(10);
t3=new JTextField(10);

b1=new JButton("Add");
b2=new JButton("Search");
b3=new JButton("Remove");
     
      t=new JTextArea(20,20);
      p1=new JPanel();
      p1.add(t);
     
      p2=new JPanel();
      p2.setLayout(new GridLayout(2,3));
      p2.add(t1);
      p2.add(t2);
      p2.add(b1);
      p2.add(t3);
      p2.add(b2);
       p2.add(b3);

      add(p1);
      add(p2);

      b1.addActionListener(this);
      b2.addActionListener(this);
      b3.addActionListener(this);
      
      setLayout(new FlowLayout());
      setSize(500,500);
      setVisible(true);
     
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
   }
   public void actionPerformed(ActionEvent e)
   {
           if(b1==e.getSource())
           {
             String name = t1.getText();
             int code = Integer.parseInt(t2.getText());
             ts.put(name,code);
             Enumeration k=ts.keys();
             Enumeration v=ts.elements();
             String msg="";
             while(k.hasMoreElements())
             {
                     msg=msg+k.nextElement()+"="+v.nextElement()+"\n";
              }
               t.setText(msg);
              t1.setText("");
              t2.setText("");
           } 
          else if(b2==e.getSource())
          {
                 String name = t3.getText() ;
                 if(ts.containsKey(name))
                 {
     t.setText(ts.get(name).toString());
                 }
                          
                 else

    JOptionPane.showMessageDialog(null,"City not found...");
            }
               else if(b3==e.getSource())
               {
                     String name = t3.getText();
                     if(ts.containsKey(name))
                     {
                          ts.remove(name);
    JOptionPane.showMessageDialog(null,"City Deleted...");
                       }
                       else
    JOptionPane.showMessageDialog(null,"City not found...");
                      }
               }
               public static void main(String a[])
               {
                       new city();
               }
 }               
            
 // Slip 4. Q2: Write a program that implements a multi-thread application that has three threads. First thread generates random integer every 1 second and if the value is even, second thread computes the square of the number and prints. If the value is odd, the third thread will print the value of cube of the number.


 
import java.util.Random;

class Square extends Thread

{

 int x;

 Square(int n)

 {

 x = n;

 }

 public void run()

 {

 int sqr = x * x;

 System.out.println("Square of " + x + " = " + sqr );

 }

}

class Cube extends Thread

{

 int x;

 Cube(int n)

 {x = n;

 }

 public void run()

 {

 int cub = x * x * x;

 System.out.println("Cube of " + x + " = " + cub );

 }

}

class Number extends Thread

{

 public void run()

 {

 Random random = new Random();

 for(int i =0; i<5; i++)

 {

 int randomInteger = random.nextInt(100);

 System.out.println("Random Integer generated : " + randomInteger);

 Square s = new Square(randomInteger);

 s.start();

 Cube c = new Cube(randomInteger);

 c.start();

 try {

 Thread.sleep(1000);

} catch (InterruptedException ex) {

 System.out.println(ex);

}

 }

 }

}

public class Thr {

 public static void main(String args[])

 {

 Number n = new Number();

 n.start();

 }

}


// Slip 5. Q1: Write a program for a simple search engine. Accept a string to be searched. Search for the string in all text files in the current folder. Use a separate thread for each file. The result should display the filename, line number where the string is found.  


import java.io.*;
 
public class SearchThread extends Thread
{
    File f1;
    String fname;
    static String str;
    String line;
     LineNumberReader reader = null;
    SearchThread(String fname)
    {
        this.fname=fname;
        f1=new File(fname);
    }
    public void run()
    {           
        try
        { 
            FileReader fr=new FileReader(f1);
            reader=new  LineNumberReader(fr);
            while((line=reader.readLine())!=null)
            {
                if(line.indexOf(str)!=-1)
                {
                    System.out.println("string found in "+fname+"at "+reader.getLineNumber()+"line");
                    stop();
                }
            }
        }
        catch(Exception e)
        {
        }
     }       
    public static void main(String[] args) throws IOException
    {
        Thread t[]=new Thread[20];
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter String to search");
        str=br.readLine();
         
        FilenameFilter filter = new FilenameFilter()
        {
            public boolean accept(File file, String name) 
        {
                if (name.endsWith(".txt")) 
            {
                     return true;
                }
            else
                {
                 return false;
                }
            }
    };
  
    File dir1 = new File(".");
    File[] files = dir1.listFiles(filter);
        if (files.length == 0) 
    {
        System.out.println("no files available with this extension");
    } 
    else
        {
             for(int i=0;i<files.length;i++)
             {
                 for (File aFile : files) 
                     {
                        t[i]=new SearchThread(aFile.getName());
                        t[i].start();
                         }
             }
        } 
    }
}


// Slip 5. Q2: Create a PROJECT table with fields project_id, Project_name, Project_description,Project_Status. etc. Insert values in the table. Display all the details of the PROJECT table in a tabular format on the screen.(using swing).


package src;

import java.sql.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;


class project1 extends JFrame implements ActionListener
{          
            JLabel l1,l2,l3,l4;
            JTextField t1,t2,t3,t4;
            JButton b1,b2,b3;
            String sql;
            JPanel p,p1;
            Connection con;
            PreparedStatement ps;


            JTable t;
            JScrollPane js;
            Statement stmt ;
            ResultSet rs ;
            ResultSetMetaData rsmd ;
            int columns;
            Vector columnNames = new Vector();
            Vector data = new Vector();

            project1()
            {

                        l1 = new JLabel("p_id :");
                        l2 = new JLabel("p_name :");
                        l3 = new JLabel("p_discription :"); 
                        l4 = new JLabel("p_status :"); 
                                         																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									
                        t1 = new JTextField(20);
                        t2 = new JTextField(20);
                        t3 = new JTextField(20);
                        t4 = new JTextField(20);


                        b1 = new JButton("Save");
                        b2 = new JButton("Display");
                        b3 = new JButton("Clear");

                        b1.addActionListener(this);
                        b2.addActionListener(this);
                        b3.addActionListener(this);

                        p=new JPanel();
                        p1=new JPanel();
                        p.add(l1);
                        p.add(t1);
                        p.add(l2);
                        p.add(t2);
                        p.add(l3);
                        p.add(t3);
                        p.add(l4);
                        p.add(t4);
                        

                        p.add(b1);
                        p.add(b2);
                        p.add(b3);
                        

                        add(p);
                        setLayout(new GridLayout(2,1));
                        setSize(600,800);
                        setVisible(true);
                        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);


            }

            public void actionPerformed(ActionEvent e)
            {
                        if((JButton)b1==e.getSource())
                        {
                                    int no = Integer.parseInt(t1.getText());
                                    String name = t2.getText();
                                    String name1 = t3.getText();
                                    String name2 = t4.getText();
                                    System.out.println("Accept Values");
                                    try
                                    {
                                                Class.forName("org.postgresql.Driver");
con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/pallavi","postgres","postgres");                                               
sql = "insert into project1 values(?,?,?,?)";
                                                ps = con.prepareStatement(sql);
                                                ps.setInt(1,no);
                                                ps.setString(2, name);
                                                ps.setString(3, name1);
                                                ps.setString(4, name2);
                                                System.out.println("values set");
                                                int n=ps.executeUpdate();
                                                if(n!=0)
                                                {
                                                            JOptionPane.showMessageDialog(null,"Record insered ...");                                  
                                                }

                                                else
                                                            JOptionPane.showMessageDialog(null,"Record NOT inserted ");

                                    }//end of try
                                    catch(Exception ex)
                                    {
                                                System.out.println(ex);          
                                                //ex.printStackTrace();
                                    }

                        }//end of if
                        else if((JButton)b2==e.getSource())
                        {
                                    try
                                    {
                                                Class.forName("org.postgresql.Driver");
con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/pallavi","postgres","postgres");
                                                System.out.println("Connected");
                                                stmt=con.createStatement();
                                                rs = stmt.executeQuery("select * from project1");
                                                rsmd = rs.getMetaData();
                                                columns = rsmd.getColumnCount();

                                                //Get Columns name
                                                for(int i = 1; i <= columns; i++)
                                                {
                                                            columnNames.addElement(rsmd.getColumnName(i));
                                                }

                                                //Get row data
                                                while(rs.next())
                                                {
                                                            Vector row = new Vector(columns);
                                                            for(int i = 1; i <= columns; i++)
                                                            	
                                                            	{

                                                            
                                                     
                                                                        row.addElement(rs.getObject(i));
                                                            }
                                                            data.addElement(row);
                                                                                      }

                                                t = new JTable(data, columnNames);
                                                js = new JScrollPane(t);

                                                                           p1.add(js);
                                                add(p1);

                                                setSize(600, 600);
                                                setVisible(true);
                                    }
                                    catch(Exception e1)
                                    {
                                                System.out.println(e1);
                                    }
                        }
                        else
                        {
                                    t1.setText(" ");
                                    t2.setText(" ");
                                    t3.setText(" ");

                        }
            }//end of method

            public static void main(String args[])
            {
                        project1 ob = new project1();
            }
}

// Slip 6. Q1: Create a MOBILE table with fields Model_Number, Model_Name, Model_Color, Sim_Type, NetworkType, BatteryCapacity, InternalStorage, RAM and ProcessorType.Insert values in the Command line argument to perform the following operations on MOBILE table. 1. table. Write a menu driven program to pass the input using Insert 2. Modify 3. Delete 4. Search 5. View All 6. Exit

package Tybcs;
import java.sql.*;
import java.io.*;
class mobile
{
  public static void main(String[] args) throws Exception
  {
     
    Statement stmt =  null;
    ResultSet rs = null;
    PreparedStatement ps1 = null, ps2=null;
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String name;
    int r,choice;
    float per;
    Class.forName("org.postgresql.Driver");
    Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost/gare","postgres","postgres");
    stmt = conn.createStatement();
         
    if(conn!=null)
        System.out.println("Connection successful..");
    do
    {
    System.out.println("1: View Records");
    System.out.println("2: Insert Record");
    System.out.println("3: Delete Record");
    System.out.println("4: Modify Record");
    System.out.println("5: Search Record");
    System.out.println("6: Exit");
    System.out.println("\nEnter your choice : ");
    choice = Integer.parseInt(br.readLine());
    switch(choice)
    {
        case 1: 
        rs = stmt.executeQuery("Select * from mobile");
        while(rs.next())  
 {
                System.out.print("model_Number = " + rs.getInt(1));
                System.out.println("model_Name = " + rs.getString(2));
                System.out.println("model_colour= " + rs.getString(3));
                System.out.println("sim_type= " + rs.getString(4));
                System.out.println("networktype = " + rs.getString(5));
                System.out.print("batterycapacity = " + rs.getInt(6));
                System.out.print("ram = " + rs.getInt(7));
                System.out.println("processortype= " + rs.getString(8));
                
                
                
            }
        break;
    case 2: 
        System.out.println("Enter the model_Number");
        r= Integer.parseInt(br.readLine());
        System.out.println("Enter model_Name:");
        name = br.readLine();
        System.out.println("Enter model_colour:");
        name = br.readLine();
        System.out.println("Enter sim_type:");
        name = br.readLine();
        System.out.println("Enter networktype:");
        name = br.readLine();
        System.out.println("Enter the batterycapaciy");
        r= Integer.parseInt(br.readLine());
        System.out.println("Enter the ram");
        r= Integer.parseInt(br.readLine());
        name = br.readLine();
        System.out.println("Enter processortype:");
        name = br.readLine();
      
        ps1 = conn.prepareStatement("Insert into mobile values(?,?,?)");
        ps1.setInt(1,r); 
                ps1.setString(2,name);
                ps1.setString(3,name);
                ps1.setString(4,name);
                ps1.setString(5,name);
                ps1.setInt(6,r);
                ps1.setInt(7,r);
                ps1.setString(8,name);
      
                ps1.executeUpdate();
                System.out.println("record inserted successfully");
        break;  
    case 3: 
        System.out.println("Enter the model_Number to be deleted ");
        r = Integer.parseInt(br.readLine());
        stmt.executeUpdate("Delete from mobile where model_Number = " + r);
                System.out.println("record deleted successfully");
        break;
    case 4: 
        System.out.println("Enter the model_Number to be modified ");
        r = Integer.parseInt(br.readLine());
        System.out.println("Enter new model_Name");
        name = br.readLine();
        System.out.println("Enter model_colour:");
        name = br.readLine();
        System.out.println("Enter sim_type:");
        name = br.readLine();
        System.out.println("Enter networktype:");
        name = br.readLine();
        System.out.println("Enter the batterycapaciy");
        r= Integer.parseInt(br.readLine());
        System.out.println("Enter the ram");
        r= Integer.parseInt(br.readLine());
        name = br.readLine();
        System.out.println("Enter processortype:");
        name = br.readLine();
                
    ps2 = conn.prepareStatement("Update mobile set model_Number = ?,model_Name = ?,model_colour = ? , sim_type = ?,networktype = ?,batteryvcapacity = ?, ram = ?, processortype =?");
	    ps2.setInt(1,r); 
	    ps2.setString(2,name);
	    ps2.setString(3,name);
	    ps2.setString(4,name);
	    ps2.setString(5,name);
	    ps2.setInt(6,r);
	    ps2.setInt(7,r);
	    ps2.setString(8,name);
	               
        ps2.executeUpdate();
                 System.out.println("record modified successfully");
        break;
    case 5: 
        System.out.println("Enter the mode_Number to be searched ");
        r = Integer.parseInt(br.readLine());
        rs = stmt.executeQuery("Select * from mobile where model_Number = " + r);
        if(rs.next())
        {
            System.out.print("model_Number = " + rs.getInt(1));
                System.out.println("model_Name = " + rs.getString(2));
                System.out.println("model_colour = " + rs.getString(3));
                System.out.println("sim_type = " + rs.getString(4));
                System.out.println("networktype = " + rs.getString(5));
                System.out.print("batterycapaciy = " + rs.getInt(6));
                System.out.print("ram = " + rs.getInt(7));
                System.out.println("processortype = " + rs.getString(8));
                     
        }
        else
            System.out.println("mobile not found");    
        break;  
     }
     
     
     
    

   } while(choice != 6);
   }                    
 }  


// Slip 6. Q2: Create a JSP page for an online multiple choice test. The questions are randomly selected from a database and displayed on the screen. The choices are displayed using radio buttons. When the user clicks on next, the next question is displayed. When the user clicks on submit, display the total score on  the screen.

	
<%@page import="java.sql.*,java.util.*"%>
<%
    Class.forName("org.postgresql.Driver");
 
    Connection con = DriverManager.getConnection(
    "jdbc:postgresql:ty1","postgres","");
 
    Set s = new TreeSet();
 
    while(true){
        int n = (int)(Math.random()*11+1);
 
        s.add(n);
 
        if(s.size()==5) break;
    }       
 
    PreparedStatement ps = con.prepareStatement("select * from questions where qid=?");
%>
<form method='post' action='accept_ans.jsp'>
<table width='70%' align='center'>
<%
    int i=0;
    Vector v = new Vector(s);
    session.setAttribute("qids",v);
 
    int qid = Integer.parseInt(v.get(i).toString());
    ps.setInt(1,qid);
    ResultSet rs = ps.executeQuery();
    rs.next();
%>
<tr>
    <td><b>Question:<%=i+1%></b></td>
</tr>
<tr>
    <td><pre><b><%=rs.getString(2)%></pre></b></td>
</tr>
<tr>
    <td>
    <b>
    <input type='radio' name='op' value=1><%=rs.getString(3)%><br>
    <input type='radio' name='op' value=2><%=rs.getString(4)%><br>
    <input type='radio' name='op' value=3><%=rs.getString(5)%><br>
    <input type='radio' name='op' value=4><%=rs.getString(6)%><br><br>
    </b>
    </td>
</tr>
<tr>
    <td align='center'>
    <input type='submit' value='Next' name='ok'>
    <input type='submit' value='Submit' name='ok'>
    </td>
</tr>
</table>
<input type='hidden' name='qno' value=<%=qid%>>
<input type='hidden' name='qid' value=<%=i+1%>>
</form>
</body>

acceptans.jsp:**********

<%@page import="java.sql.*,java.util.*"%>
<%
    Class.forName("org.postgresql.Driver");
 
    Connection con = DriverManager.getConnection(
    "jdbc:postgresql:ty1","postgres","");
 
    Vector answers = (Vector)session.getAttribute("answers");
 
    if(answers==null)
        answers = new Vector();
 
    int qno = Integer.parseInt(request.getParameter("qno"));
    int ans = Integer.parseInt(request.getParameter("op"));
    int i = Integer.parseInt(request.getParameter("qid"));
 
    answers.add(qno+" "+ans);
 
    session.setAttribute("answers",answers);
 
    String ok = request.getParameter("ok");
 
    if(ok.equals("Submit") || i==5){
        response.sendRedirect("result.jsp");
        return;
    }   
     
    PreparedStatement ps = con.prepareStatement("select * from questions where qid=?");
%>
<form method='post' action='accept_ans.jsp'>
<table width='70%' align='center'>
<%
    Vector v = (Vector)session.getAttribute("qids");
 
    int qid = Integer.parseInt(v.get(i).toString());
    ps.setInt(1,qid);
    ResultSet rs = ps.executeQuery();
    rs.next();
%>
<tr>
<td><b>Question:<%=i+1%></b></td>
</tr>
<tr>
<td><pre><b><%=rs.getString(2)%></pre></b></td>
</tr>
<tr>
<td>
<b>
<input type='radio' name='op' value=1><%=rs.getString(3)%><br>
<input type='radio' name='op' value=2><%=rs.getString(4)%><br>
<input type='radio' name='op' value=3><%=rs.getString(5)%><br>
<input type='radio' name='op' value=4><%=rs.getString(6)%><br><br>
</b>
</td>
</tr>
<tr>
    <td align='center'>
    <input type='submit' value='Next' name='ok'>
    <input type='submit' value='Submit' name='ok'>
    </td>
</tr>
</table>
<input type='hidden' name='qno' value=<%=qid%>>
<input type='hidden' name='qid' value=<%=i+1%>>
</form>
</body>

result.jsp:**************

<%@page import="java.sql.*,java.util.*,java.text.*"%>
<%
    Class.forName("org.postgresql.Driver");
 
    Connection con = DriverManager.getConnection(
    "jdbc:postgresql:ty1","postgres","");
 
    Vector v = (Vector)session.getAttribute("answers");
    if(v==null){
%>
<h1>No questions answered</h1>
<%
        return;
    }
 
    PreparedStatement ps = con.prepareStatement("select ans from questions where qid=?");
 
    int tot=0;
 
    for(int i=0;i<v.size();i++){
        String str = v.get(i).toString();
        int j = str.indexOf(' ');
        int qno = Integer.parseInt(str.substring(0,j));
        int gans = Integer.parseInt(str.substring(j+1));
 
        ps.setInt(1,qno);
         
        ResultSet rs = ps.executeQuery();
        rs.next();
 
        int cans = rs.getInt(1);
 
        if(gans==cans) tot++;
    }
 
    session.removeAttribute("qids");
    session.removeAttribute("answers");
    session.removeAttribute("qid");
%>   
<h3>Score:<%=tot%></h1>
<center><a href='exam.jsp'>Restart</a></center>
</body>

// Slip 7. Q1: Consider the following entities and their relationships Movie (movie_no,movie_name, release_year) Actor(actor_no, name) Relationship between movie and actor is many – many with attribute rate in Rs. Create a RDB in 3 NF answer the following: a) Accept an actor name and display all movie names in which he has acted along with his name on top. b) Accept a movie name and list all actors in that movie along with the movie name on top.



html file -
<html>
<body>
<form action="slip_22.php" method="get">
<h3>Enter Actor Name : <input type=text name=nm> </h3>
<input type=radio name=a value=1>Display Movie Name
<h3>Enter movie no :<input type=text name=m_no>
<h3>Enter movie name :<input type=text name=m_nm>
<h3>Enter release year :<input type=text name=r_yr>
<h3>Enter actor no :<input type=text name=a_no>
<h3>Enter actor name :<input type=text name=a_nm>
<input type=radio name=a value=2>Insert New movie info
<input type=submit value=OK>
</form>
<div id="place"></div>
</body>
</html>

php file -

<?php
$r = $_GET['a'];
$con = mysql_connect("localhost","root","");
$d = mysql_select_db("bca_programs",$con);

if($r == 1)
{ $actor_name = $_GET['nm'];
$q = mysql_query("select m_name from movie,actor,movie_actor where movie.m_no=movie_actor.m_no and actor.a_no=movie_actor.a_no and a_name='$actor_name'");
echo "
Movie Name
";
while($row=mysql_fetch_array($q))
{
echo $row[0]."
";
}
}
else if($r == 2)
{ $m_no = $_GET['m_no'];
$m_name = $_GET['m_nm'];
$r_yr = $_GET['r_yr'];
$a_no = $_GET['a_no'];
$a_name = $_GET['a_nm'];
$q = mysql_query("insert into movie values($m_no,'$m_name',$r_yr)");
$q1 = mysql_query("insert into actor values($a_no,'$a_name')");
echo "Value Inserted";
}
mysql_close();
?>

// Slip 7. Q2: Write a program to calculate the sum and average of an array of 1000 integers (generated randomly) using 10 threads. Each thread calculates the sum of 100 integers. Use these values to calculate average. [Use join method ].

import java.util.*;
class thread implements Runnable
{
   Thread t;
   int i,no,sum;
   int a[]=new int[1000];
   thread(String s,int n)
  {
    Random rs = new Random();
    t=new Thread(this,s);
    no=n;
    int j=0;
    for(i=1;i<=1000;i++)
  {
    a[j]=rs.nextInt()%100;
                            j++;
   }
     t.start();
    }
      public void run() 
     {
      for(i=0;i<100;i++)
      {
       sum=sum+a[no];
       no++;
      }
       System.out.println("Sum ="+sum);
      System.out.println("Avg ="+sum/100);
    }
  }
   public class Slip12_2
   {
     public static void main(String[] args)throws InterruptedException
    {
      thread t1=new thread("g",1);
      t1.t.join();
      thread t2=new thread("r",100);
      t2.t.join();
      thread t3=new thread("s",200);
      t3.t.join();
      thread t4=new thread("t",300);
      t4.t.join();
      thread t5=new thread("p",400);
      t5.t.join();
      thread t6=new thread("p",500);
      t5.t.join();
      thread t7=new thread("p",600);
      t5.t.join();
      thread t8=new thread("p",700);
      t5.t.join();
      thread t9=new thread("p",800);
      t5.t.join();
      thread t10=new thread("p",900);
      t5.t.join();
      }
    }                 
         


// Slip 8. Q1: Write a program that simulates a traffic light. The program lets the user select one of three lights: red, yellow, or green with radio buttons. On selecting a button, an appropriate message with “stop” or “ready” or “go”should appear above the buttons in a selected color. Initially there is no message shown.




import java.awt.Color;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import javax.swing.*;

class App extends JFrame implements ItemListener
{
	JFrame actualWindow;
	JPanel messageContainer, lightsContainer;
	JLabel message;
	ButtonGroup btn_group;
	JRadioButton rb_red, rb_yellow, rb_green;
	
	App()
	 {
		Font myFont = new Font("Verdana",Font.BOLD, 30);
		actualWindow = new JFrame("Traffic Lights");
		messageContainer = new JPanel();
		lightsContainer = new JPanel();
		message = new JLabel("Select Light");
		btn_group = new ButtonGroup();
		rb_red = new JRadioButton("Red");TrafficLight
		rb_yellow = new JRadioButton("Yellow");TrafficLight
		rb_green = new JRadioButton("Green");
		
		actualWindow.setLayout(new GridLayout(2, 1));
		
		message.setFont(myFont);
		rb_red.setForeground(Color.RED);
		rb_yellow.setForeground(Color.YELLOW);
		rb_green.setForeground(Color.GREEN);
		
		btn_group.add(rb_red);
		btn_group.add(rb_yellow);
		btn_group.add(rb_green);
		
		rb_red.addTrafficLightItemListener(this);
		rb_yellow.addItemListener(this);
		rb_green.addItemListener(this);
		
		messageContainer.add(message);
		lightsContainer.add(rb_red);
		lightsContainer.add(rb_yellow);
		lightsContainer.add(rb_green);
		
		actualWindow.add(messageContainer);
		actualWindow.add(lightsContainer);
				
		actualWindow.setSize(300, 200);
		actualWindow.setVisible(true);
	}

	@Override
	public void itemStateChanged(ItemEvent ie)
	 {
		JRadioButton selected = (JRadioButton) ie.getSource();
		String textOnButton = selected.getText();
		if(textOnButton.equals("Red")) 
		{
			mTrafficLightessage.setForeground(Color.RED);
			message.setText("STOP");
		} else if(textOnButton.equals("Yellow")) 
		{
			message.setForeground(Color.YELLOW);
			message.setText("READY");
		} else {
			message.setForeground(Color.GREEN);
			message.setText("GO");
		}
	}
}
public class TrafficLight {

	public static void main(String[] args) {
		new App();
	}

}




// Slip 8. Q2: Design a following Registration form and raise an appropriate exception if invalid information is entered like Birth Year ‘0000’


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class MyFrame
extends JFrame
implements ActionListener {
private Container c;
private JLabel title;
private JLabel name;
private JTextField tname;
private JLabel mno;
private JTextField tmno;
private JLabel gender;
private JRadioButton male;
private JRadioButton female;
private ButtonGroup gengp;
private JLabel dob;
private JComboBox date;
private JComboBox month;
private JComboBox year;
private JLabel add;
private JTextArea tadd;
private JCheckBox term;
private JButton sub;
private JButton reset;
private JTextArea tout;
private JLabel res;
private JTextArea resadd;
private String dates[]
= { "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10",
"11", "12", "13", "14", "15",
"16", "17", "18", "19", "20",
"21", "22", "23", "24", "25",
"26", "27", "28", "29", "30",
"31" };
private String months[]
= { "Jan", "feb", "Mar", "Apr",
"May", "Jun", "July", "Aug",
"Sup", "Oct", "Nov", "Dec" };
private String years[]
= { "1995", "1996", "1997", "1998",
"1999", "2000", "2001", "2002",
"2003", "2004", "2005", "2006",
"2007", "2008", "2009", "2010",
"2011", "2012", "2013", "2014",
"2015", "2016", "2017", "2018",
"2019" };
public MyFrame()
{
setTitle("Registration Form");
setBounds(300, 90, 900, 600);
setDefaultCloseOperation(EXIT_ON_CLOSE);
setResizable(false);
c = getContentPane();
c.setLayout(null);
title = new JLabel("Registration Form");
title.setFont(new Font("Arial", Font.PLAIN, 30));
title.setSize(300, 30);
title.setLocation(300, 30);
c.add(title);
name = new JLabel("Name");
name.setFont(new Font("Arial", Font.PLAIN, 20));
name.setSize(100, 20);
name.setLocation(100, 100);
c.add(name);
tname = new JTextField();
tname.setFont(new Font("Arial", Font.PLAIN, 15));
tname.setSize(190, 20);
tname.setLocation(200, 100);
c.add(tname);
mno = new JLabel("Mobile");
mno.setFont(new Font("Arial", Font.PLAIN, 20));
mno.setSize(100, 20);
mno.setLocation(100, 150);
c.add(mno);
tmno = new JTextField();
tmno.setFont(new Font("Arial", Font.PLAIN, 15));
tmno.setSize(150, 20);
tmno.setLocation(200, 150);
c.add(tmno);
gender = new JLabel("Gender");
gender.setFont(new Font("Arial", Font.PLAIN, 20));
gender.setSize(100, 20);
gender.setLocation(100, 200);
c.add(gender);

male = new JRadioButton("Male");
male.setFont(new Font("Arial", Font.PLAIN, 15));
male.setSelected(true);
male.setSize(75, 20);
male.setLocation(200, 200);
c.add(male);
female = new JRadioButton("Female");
female.setFont(new Font("Arial", Font.PLAIN, 15));
female.setSelected(false);
female.setSize(80, 20);
female.setLocation(275, 200);
c.add(female);
gengp = new ButtonGroup();
gengp.add(male);
gengp.add(female);
dob = new JLabel("DOB");
dob.setFont(new Font("Arial", Font.PLAIN, 20));
dob.setSize(100, 20);
dob.setLocation(100, 250);
c.add(dob);
date = new JComboBox(dates);
date.setFont(new Font("Arial", Font.PLAIN, 15));
date.setSize(50, 20);
date.setLocation(200, 250);
c.add(date);
month = new JComboBox(months);
month.setFont(new Font("Arial", Font.PLAIN, 15));
month.setSize(60, 20);
month.setLocation(250, 250);
c.add(month);
year = new JComboBox(years);
year.setFont(new Font("Arial", Font.PLAIN, 15));
year.setSize(60, 20);
year.setLocation(320, 250);
c.add(year);
add = new JLabel("Address");
add.setFont(new Font("Arial", Font.PLAIN, 20));
add.setSize(100, 20);
add.setLocation(100, 300);
c.add(add);
tadd = new JTextArea();
tadd.setFont(new Font("Arial", Font.PLAIN, 15));
tadd.setSize(200, 75);
tadd.setLocation(200, 300);
tadd.setLineWrap(true);
c.add(tadd);
term = new JCheckBox("Accept Terms And Conditions.");
term.setFont(new Font("Arial", Font.PLAIN, 15));
term.setSize(250, 20);
term.setLocation(150, 400);
c.add(term);
sub = new JButton("Submit");
sub.setFont(new Font("Arial", Font.PLAIN, 15));
sub.setSize(100, 20);
sub.setLocation(150, 450);
sub.addActionListener(this);
c.add(sub);
reset = new JButton("Reset");
reset.setFont(new Font("Arial", Font.PLAIN, 15));
reset.setSize(100, 20);
reset.setLocation(270, 450);
reset.addActionListener(this);
c.add(reset);
tout = new JTextArea();
tout.setFont(new Font("Arial", Font.PLAIN, 15));
tout.setSize(300, 400);
tout.setLocation(500, 100);
tout.setLineWrap(true);
tout.setEditable(false);
c.add(tout);
res = new JLabel("");
res.setFont(new Font("Arial", Font.PLAIN, 20));
res.setSize(500, 25);
res.setLocation(100, 500);
c.add(res);
resadd = new JTextArea();
resadd.setFont(new Font("Arial", Font.PLAIN, 15));
resadd.setSize(200, 75);
resadd.setLocation(580, 175);
resadd.setLineWrap(true);
c.add(resadd);
setVisible(true);
}
public void actionPerformed(ActionEvent e)
{
if (e.getSource() == sub) {
if (term.isSelected()) {
String data1;
String data
= "Name : "
+ tname.getText() + "\n"
+ "Mobile : "
+ tmno.getText() + "\n";
if (male.isSelected())
data1 = "Gender : Male"
+ "\n";
else
data1 = "Gender : Female"
+ "\n";String data2
= "DOB : "
+ (String)date.getSelectedItem()
+ "/" + (String)month.getSelectedItem()
+ "/" + (String)year.getSelectedItem()
+ "\n";
String data3 = "Address : " + tadd.getText();
tout.setText(data + data1 + data2 + data3);
tout.setEditable(false);
res.setText("Registration Successfully..");
}
else 
{
tout.setText("");
resadd.setText("");
res.setText("Please accept the"
+ " terms & conditions..");
}
}
else if (e.getSource() == reset) {
String def = "";
tname.setText(def);
tadd.setText(def);
tmno.setText(def);
res.setText(def);
tout.setText(def);
term.setSelected(false);
date.setSelectedIndex(0);
month.setSelectedIndex(0);
year.setSelectedIndex(0);
resadd.setText(def);
}
}
}
class Registration {

public static void main(String[] args) throws Exception
{
MyFrame f = new MyFrame();
}
}




// Slip 9. Q1: Write a program to create a thread for moving a ball inside a panel vertically. The ball should be created when the user clicks on the start button.

import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class boucingthread extends JFrame implements
Runnable
{
 Thread t;
 int x,y;
 
 boucingthread()
 {
  super();
  t=new Thread(this);
  x=10;
  y=10;
  t.start();
  setSize(1000,200);
  setVisible(true);
  setTitle("BOUNCEING BOLL WINDOW");
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 }
  public void run()
  {
   try 
   {
    while(true)
    {
     x+=10;
     y+=10;
     repaint();
     Thread.sleep(1000);
    }
   }
   catch(Exception e)
   {
    
   }
  }
  public void paint(Graphics g)
  {
   g.drawOval(x,y,7,7);
  }
  public static void main(String a[])throws Exception
  {
   boucingthread t=new boucingthread();
   Thread.sleep(1000);
    }
 }      
 


// Slip 9. Q2: Write a java program to accept names of ‘n’ cities, insert same into array list collection and display the contents of same array list, also remove all these elements.


import java.util.LinkedList;
class Main
{
  public static void main(String args[])
 {
  LinkedList<String> friends = new LinkedList<>();
  friends.add("neha");
  friends.add("praju");
  friends.add("dhanu");
  System.out.println("LinkedList: " + friends);
   }
 }


// Slip 10. Q1: Using the concepts of thread synchronization create two threads as sender and receiver. Sender thread will set a message to the receiver thread that will display the message on console. The sender thread accepts the input message from console. Continue this process until sender sets the message as “Good Bye Corona”.


import java.io.*;
import java.util.*;
 

class Sender
{
    public void send(String msg)
    {
        System.out.println("Sending\t"  + msg );
        try
        {
            Thread.sleep(1000);
        }
        catch (Exception e)
        {
            System.out.println("Thread  interrupted.");
        }
        System.out.println("\n" + msg + "Sent");
    }
}
 

class ThreadedSend extends Thread
{
    private String msg;
    Sender  sender;
 
    
    ThreadedSend(String m,  Sender obj)
    {
        msg = m;
        sender = obj;
    }
 
    public void run()
    {
        
        synchronized(sender)
        {
           
            sender.send(msg);
        }
    }
}
 

class SyncDemo
{
    public static void main(String args[])
    {
        Sender send = new Sender();
        ThreadedSend S1 =
            new ThreadedSend( " Good " , send );
        ThreadedSend S2 =
            new ThreadedSend( " Corona" , send );
      ThreadedSend S3 =
            new ThreadedSend( " Bye " , send );
  
        
        S1.start();
        S2.start();
         S3.start();
 
        
        try
        {
            S1.join();
            S2.join();
            S3.start();
        }
        catch(Exception e)
        {
            System.out.println("Interrupted");
            
        }
    }
}



// Slip 10. Q2: Write a program to create a new tree set, add some colors (string) and print out the tree set.



import java.util.TreeSet;
public class Exercise1
{
   public static void main(String[] args)
{
   TreeSet<String> tree_set= new TreeSet<String>();
    tree_set.add("Red");
    tree_set.add("Green");
    tree_set.add("Orange");
    tree_set.add("White");
    tree_set.add("Black");
 System.out.println("Tree set: ");
 System.out.println(tree_set);
  }
}
